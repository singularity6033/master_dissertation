import torch
from torch.utils.data import DataLoader
from torchvision import datasets, transforms
import torch.nn.functional as f
import time
from utils.fpl import FPL, DEVICE_
import utils.my_module as mm
import os

BATCH_SIZE = 64
dataset_name = 'cifar100'  # 'cifar100'
model_save_path = './saved_models/vgg16_' + dataset_name + '_fpl'
weights_save_path = './saved_weights/vgg16_' + dataset_name + '_fpl'

os.environ["CUDA_VISIBLE_DEVICES"] = "1"
DEVICE = 'cuda' if torch.cuda.is_available() else 'cpu'
N_CLASSES = 100

mm.DEVICE = DEVICE
DEVICE_[0] = DEVICE
t0 = time.time()
no_epochs = 200

# download and create datasets
train_dataset = datasets.CIFAR100(root=dataset_name + '_data',
                                  train=True,
                                  transform=transforms.Compose([
                                      transforms.RandomHorizontalFlip(),
                                      transforms.RandomCrop(32, 4),
                                      transforms.ToTensor(),
                                  ]),
                                  download=True)

valid_dataset = datasets.CIFAR100(root=dataset_name + '_data',
                                  train=False,
                                  transform=transforms.Compose([
                                      transforms.ToTensor(),
                                  ]))

# define the data loaders
train_loader = DataLoader(dataset=train_dataset,
                          batch_size=BATCH_SIZE,
                          shuffle=True)

val_loader = DataLoader(dataset=valid_dataset,
                        batch_size=BATCH_SIZE,
                        shuffle=False)

# add conv layers (+ pooling layers)
print('+++++++++++++++++++++++ Model 1 +++++++++++++++++++++++++')
t0 = time.time()

model = mm.MyCNN(N_CLASSES).to(DEVICE)
model = model.float()
model.add(mm.MyLayer('conv', [3, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('flat', 0, 0, 0))
model.add(mm.MyLayer('fc', [64 * 32 * 32, N_CLASSES], bias=False, activations=torch.sigmoid))
model.complete_net(train_loader)
wl_0 = torch.zeros(N_CLASSES, 64 * 32 * 32).float().to(DEVICE)
model.set_weights_index(wl_0, -1)
model_name = '_1'
print([x.name for x in model.layers])

print('************** pre train phase ****************')
pre_train = FPL(model, train_loader, val_loader, epochs=2, loop=1, gain=-1, mix_data=False,
                model_name=model_name, path=model_save_path)
pre_train.inverse_layerwise_training(no_layers=1)
print('************** fine-tuning phase ****************')
fine_tuning = FPL(model, train_loader, val_loader, epochs=no_epochs, gain=1e-3,
                  model_name=model_name, path=model_save_path)
fine_tuning.inc_train_2_layer(pool_layer=False, true_for=5)
print('time: ', time.time() - t0)
weights_1 = model.get_weights()
acc_lst, loss_lst = model.evaluate_both(train_loader, val_loader)
print('accuracy: ', acc_lst)
print('loss: ', loss_lst)
torch.save(weights_1[0], os.path.join(weights_save_path, dataset_name+'_vgg16_w1_0.pt'))
torch.save(weights_1[2], os.path.join(weights_save_path, dataset_name+'_vgg16_w1_2.pt'))

print('+++++++++++++++++++++++ Model 2 +++++++++++++++++++++++++')
t0 = time.time()

model = mm.MyCNN(N_CLASSES).to(DEVICE)
model = model.float()
model.add(mm.MyLayer('conv', [3, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [64, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('flat', 0, 0, 0))
model.add(mm.MyLayer('fc', [64 * 16 * 16, N_CLASSES], False, activations=torch.sigmoid))
model.complete_net(train_loader)
wl_0 = torch.zeros(N_CLASSES, 64 * 16 * 16).float().to(DEVICE)
model.set_weights_index(wl_0, -1)
model_name = '_2'
print([x.name for x in model.layers])
model.set_weights_index(weights_1[0], 0)

print('************** pre train phase ****************')
pre_train = FPL(model, train_loader, val_loader, epochs=2, loop=1, gain=-1, mix_data=False,
                model_name=model_name, path=model_save_path)
pre_train.inverse_layerwise_training(no_layers=1)
print('************** fine-tuning phase ****************')
fine_tuning = FPL(model, train_loader, val_loader, epochs=no_epochs, gain=1e-3,
                  model_name=model_name, path=model_save_path)
fine_tuning.inc_train_2_layer(true_for=5)
print('time: ', time.time() - t0)
acc_lst, loss_lst = model.evaluate_both(train_loader, val_loader)
print('accuracy: ', acc_lst)
print('loss: ', loss_lst)

weights_2 = model.get_weights()
torch.save(weights_2[0], os.path.join(weights_save_path, dataset_name+'_vgg16_w2_0.pt'))
torch.save(weights_2[1], os.path.join(weights_save_path, dataset_name+'_vgg16_w2_1.pt'))
torch.save(weights_2[4], os.path.join(weights_save_path, dataset_name+'_vgg16_w2_4.pt'))

print('+++++++++++++++++++++++ Model 3 +++++++++++++++++++++++++')
t0 = time.time()

model = mm.MyCNN(N_CLASSES).to(DEVICE)
model = model.float()
model.add(mm.MyLayer('conv', [3, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [64, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [64, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('flat', 0, 0, 0))
model.add(mm.MyLayer('fc', [128 * 16 * 16, N_CLASSES], False, activations=torch.sigmoid))
model.complete_net(train_loader)
wl_0 = torch.zeros(N_CLASSES, 128 * 16 * 16).float().to(DEVICE)
model.set_weights_index(wl_0, -1)
model_name = '_3'
print([x.name for x in model.layers])
model.set_weights_index(weights_2[0], 0)
model.set_weights_index(weights_2[1], 1)

print('************** pre train phase ****************')
pre_train = FPL(model, train_loader, val_loader, epochs=2, loop=1, gain=-1, mix_data=False,
                model_name=model_name, path=model_save_path)
pre_train.inverse_layerwise_training(no_layers=1)
print('************** fine-tuning phase ****************')
fine_tuning = FPL(model, train_loader, val_loader, epochs=no_epochs, gain=1e-3,
                  model_name=model_name, path=model_save_path)
fine_tuning.inc_train_2_layer(pool_layer=False, true_for=5)
print('time: ', time.time() - t0)
acc_lst, loss_lst = model.evaluate_both(train_loader, val_loader)
print('accuracy: ', acc_lst)
print('loss: ', loss_lst)

weights_3 = model.get_weights()
torch.save(weights_3[0], os.path.join(weights_save_path, dataset_name+'_vgg16_w3_0.pt'))
torch.save(weights_3[1], os.path.join(weights_save_path, dataset_name+'_vgg16_w3_1.pt'))
torch.save(weights_3[3], os.path.join(weights_save_path, dataset_name+'_vgg16_w3_3.pt'))
torch.save(weights_3[5], os.path.join(weights_save_path, dataset_name+'_vgg16_w3_5.pt'))

print('+++++++++++++++++++++++ Model 4 +++++++++++++++++++++++++')
t0 = time.time()

model = mm.MyCNN(N_CLASSES).to(DEVICE)
model = model.float()
model.add(mm.MyLayer('conv', [3, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [64, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [64, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [128, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('flat', 0, 0, 0))
model.add(mm.MyLayer('fc', [128 * 8 * 8, N_CLASSES], False, activations=torch.sigmoid))
model.complete_net(train_loader)
wl_0 = torch.zeros(N_CLASSES, 128 * 8 * 8).float().to(DEVICE)
model.set_weights_index(wl_0, -1)
model_name = '_4'
print([x.name for x in model.layers])
model.set_weights_index(weights_3[0], 0)
model.set_weights_index(weights_3[1], 1)
model.set_weights_index(weights_3[3], 3)

print('************** pre train phase ****************')
pre_train = FPL(model, train_loader, val_loader, epochs=2, loop=1, gain=-1, mix_data=False,
                model_name=model_name, path=model_save_path)
pre_train.inverse_layerwise_training(no_layers=1)
print('************** fine-tuning phase ****************')
fine_tuning = FPL(model, train_loader, val_loader, epochs=no_epochs, gain=1e-3,
                  model_name=model_name, path=model_save_path)
fine_tuning.inc_train_2_layer(true_for=5)
print('time: ', time.time() - t0)
acc_lst, loss_lst = model.evaluate_both(train_loader, val_loader)
print('accuracy: ', acc_lst)
print('loss: ', loss_lst)

weights_4 = model.get_weights()
torch.save(weights_4[0], os.path.join(weights_save_path, dataset_name+'_vgg16_w4_0.pt'))
torch.save(weights_4[1], os.path.join(weights_save_path, dataset_name+'_vgg16_w4_1.pt'))
torch.save(weights_4[3], os.path.join(weights_save_path, dataset_name+'_vgg16_w4_3.pt'))
torch.save(weights_4[4], os.path.join(weights_save_path, dataset_name+'_vgg16_w4_4.pt'))
torch.save(weights_4[7], os.path.join(weights_save_path, dataset_name+'_vgg16_w4_7.pt'))

print('+++++++++++++++++++++++ Model 5 +++++++++++++++++++++++++')
t0 = time.time()

model = mm.MyCNN(N_CLASSES).to(DEVICE)
model = model.float()
model.add(mm.MyLayer('conv', [3, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [64, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [64, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [128, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [128, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('flat', 0, 0, 0))
model.add(mm.MyLayer('fc', [256 * 8 * 8, N_CLASSES], False, activations=torch.sigmoid))
model.complete_net(train_loader)
wl_0 = torch.zeros(N_CLASSES, 256 * 8 * 8).float().to(DEVICE)
model.set_weights_index(wl_0, -1)
model_name = '_5'
print([x.name for x in model.layers])
model.set_weights_index(weights_4[0], 0)
model.set_weights_index(weights_4[1], 1)
model.set_weights_index(weights_4[3], 3)
model.set_weights_index(weights_4[4], 4)

print('************** pre train phase ****************')
pre_train = FPL(model, train_loader, val_loader, epochs=2, loop=1, gain=-1, mix_data=False,
                model_name=model_name, path=model_save_path)
pre_train.inverse_layerwise_training(no_layers=1)
print('************** fine-tuning phase ****************')
fine_tuning = FPL(model, train_loader, val_loader, epochs=no_epochs, gain=1e-3,
                  model_name=model_name, path=model_save_path)
fine_tuning.inc_train_2_layer(pool_layer=False, true_for=5)
print('time: ', time.time() - t0)
acc_lst, loss_lst = model.evaluate_both(train_loader, val_loader)
print('accuracy: ', acc_lst)
print('loss: ', loss_lst)

weights_5 = model.get_weights()
torch.save(weights_5[0], os.path.join(weights_save_path, dataset_name+'_vgg16_w5_0.pt'))
torch.save(weights_5[1], os.path.join(weights_save_path, dataset_name+'_vgg16_w5_1.pt'))
torch.save(weights_5[3], os.path.join(weights_save_path, dataset_name+'_vgg16_w5_3.pt'))
torch.save(weights_5[4], os.path.join(weights_save_path, dataset_name+'_vgg16_w5_4.pt'))
torch.save(weights_5[6], os.path.join(weights_save_path, dataset_name+'_vgg16_w5_6.pt'))
torch.save(weights_5[8], os.path.join(weights_save_path, dataset_name+'_vgg16_w5_8.pt'))

print('+++++++++++++++++++++++ Model 6 +++++++++++++++++++++++++')
t0 = time.time()

model = mm.MyCNN(N_CLASSES).to(DEVICE)
model = model.float()
model.add(mm.MyLayer('conv', [3, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [64, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [64, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [128, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [128, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [256, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('flat', 0, 0, 0))
model.add(mm.MyLayer('fc', [256 * 8 * 8, N_CLASSES], False, activations=torch.sigmoid))
model.complete_net(train_loader)
wl_0 = torch.zeros(N_CLASSES, 256 * 8 * 8).float().to(DEVICE)
model.set_weights_index(wl_0, -1)
model_name = '_6'
print([x.name for x in model.layers])
model.set_weights_index(weights_5[0], 0)
model.set_weights_index(weights_5[1], 1)
model.set_weights_index(weights_5[3], 3)
model.set_weights_index(weights_5[4], 4)
model.set_weights_index(weights_5[6], 6)

print('************** pre train phase ****************')
pre_train = FPL(model, train_loader, val_loader, epochs=2, loop=1, gain=-1, mix_data=False,
                model_name=model_name, path=model_save_path)
pre_train.inverse_layerwise_training(no_layers=1)
print('************** fine-tuning phase ****************')
fine_tuning = FPL(model, train_loader, val_loader, epochs=no_epochs, gain=1e-3,
                  model_name=model_name, path=model_save_path)
fine_tuning.inc_train_2_layer(pool_layer=False, true_for=5)
print('time: ', time.time() - t0)
acc_lst, loss_lst = model.evaluate_both(train_loader, val_loader)
print('accuracy: ', acc_lst)
print('loss: ', loss_lst)

weights_6 = model.get_weights()
torch.save(weights_6[0], os.path.join(weights_save_path, dataset_name+'_vgg16_w6_0.pt'))
torch.save(weights_6[1], os.path.join(weights_save_path, dataset_name+'_vgg16_w6_1.pt'))
torch.save(weights_6[3], os.path.join(weights_save_path, dataset_name+'_vgg16_w6_3.pt'))
torch.save(weights_6[4], os.path.join(weights_save_path, dataset_name+'_vgg16_w6_4.pt'))
torch.save(weights_6[6], os.path.join(weights_save_path, dataset_name+'_vgg16_w6_6.pt'))
torch.save(weights_6[7], os.path.join(weights_save_path, dataset_name+'_vgg16_w6_7.pt'))
torch.save(weights_6[9], os.path.join(weights_save_path, dataset_name+'_vgg16_w6_9.pt'))

print('+++++++++++++++++++++++ Model 7 +++++++++++++++++++++++++')
t0 = time.time()

model = mm.MyCNN(N_CLASSES).to(DEVICE)
model = model.float()
model.add(mm.MyLayer('conv', [3, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [64, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [64, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [128, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [128, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [256, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [256, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('flat', 0, 0, 0))
model.add(mm.MyLayer('fc', [256 * 4 * 4, N_CLASSES], False, activations=torch.sigmoid))
model.complete_net(train_loader)
wl_0 = torch.zeros(N_CLASSES, 256 * 4 * 4).float().to(DEVICE)
model.set_weights_index(wl_0, -1)
model_name = '_7'
print([x.name for x in model.layers])
model.set_weights_index(weights_6[0], 0)
model.set_weights_index(weights_6[1], 1)
model.set_weights_index(weights_6[3], 3)
model.set_weights_index(weights_6[4], 4)
model.set_weights_index(weights_6[6], 6)
model.set_weights_index(weights_6[7], 7)

print('************** pre train phase ****************')
pre_train = FPL(model, train_loader, val_loader, epochs=2, loop=1, gain=-1, mix_data=False,
                model_name=model_name, path=model_save_path)
pre_train.inverse_layerwise_training(no_layers=1)
print('************** fine-tuning phase ****************')
fine_tuning = FPL(model, train_loader, val_loader, epochs=no_epochs, gain=1e-3,
                  model_name=model_name, path=model_save_path)
fine_tuning.inc_train_2_layer(true_for=5)
print('time: ', time.time() - t0)
acc_lst, loss_lst = model.evaluate_both(train_loader, val_loader)
print('accuracy: ', acc_lst)
print('loss: ', loss_lst)

weights_7 = model.get_weights()
torch.save(weights_7[0], os.path.join(weights_save_path, dataset_name+'_vgg16_w7_0.pt'))
torch.save(weights_7[1], os.path.join(weights_save_path, dataset_name+'_vgg16_w7_1.pt'))
torch.save(weights_7[3], os.path.join(weights_save_path, dataset_name+'_vgg16_w7_3.pt'))
torch.save(weights_7[4], os.path.join(weights_save_path, dataset_name+'_vgg16_w7_4.pt'))
torch.save(weights_7[6], os.path.join(weights_save_path, dataset_name+'_vgg16_w7_6.pt'))
torch.save(weights_7[7], os.path.join(weights_save_path, dataset_name+'_vgg16_w7_7.pt'))
torch.save(weights_7[8], os.path.join(weights_save_path, dataset_name+'_vgg16_w7_8.pt'))
torch.save(weights_7[11], os.path.join(weights_save_path, dataset_name+'_vgg16_w7_11.pt'))

print('+++++++++++++++++++++++ Model 8 +++++++++++++++++++++++++')
t0 = time.time()

model = mm.MyCNN(N_CLASSES).to(DEVICE)
model = model.float()
model.add(mm.MyLayer('conv', [3, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [64, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [64, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [128, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [128, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [256, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [256, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [256, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('flat', 0, 0, 0))
model.add(mm.MyLayer('fc', [512 * 4 * 4, N_CLASSES], False, activations=torch.sigmoid))
model.complete_net(train_loader)
wl_0 = torch.zeros(N_CLASSES, 512 * 4 * 4).float().to(DEVICE)
model.set_weights_index(wl_0, -1)
model_name = '_8'
print([x.name for x in model.layers])
model.set_weights_index(weights_7[0], 0)
model.set_weights_index(weights_7[1], 1)
model.set_weights_index(weights_7[3], 3)
model.set_weights_index(weights_7[4], 4)
model.set_weights_index(weights_7[6], 6)
model.set_weights_index(weights_7[7], 7)
model.set_weights_index(weights_7[8], 8)

print('************** pre train phase ****************')
pre_train = FPL(model, train_loader, val_loader, epochs=2, loop=1, gain=-1, mix_data=False,
                model_name=model_name, path=model_save_path)
pre_train.inverse_layerwise_training(no_layers=1)
print('************** fine-tuning phase ****************')
fine_tuning = FPL(model, train_loader, val_loader, epochs=no_epochs, gain=1e-3,
                  model_name=model_name, path=model_save_path)
fine_tuning.inc_train_2_layer(pool_layer=False, true_for=5)
print('time: ', time.time() - t0)
acc_lst, loss_lst = model.evaluate_both(train_loader, val_loader)
print('accuracy: ', acc_lst)
print('loss: ', loss_lst)

weights_8 = model.get_weights()
torch.save(weights_8[0], os.path.join(weights_save_path, dataset_name+'_vgg16_w8_0.pt'))
torch.save(weights_8[1], os.path.join(weights_save_path, dataset_name+'_vgg16_w8_1.pt'))
torch.save(weights_8[3], os.path.join(weights_save_path, dataset_name+'_vgg16_w8_3.pt'))
torch.save(weights_8[4], os.path.join(weights_save_path, dataset_name+'_vgg16_w8_4.pt'))
torch.save(weights_8[6], os.path.join(weights_save_path, dataset_name+'_vgg16_w8_6.pt'))
torch.save(weights_8[7], os.path.join(weights_save_path, dataset_name+'_vgg16_w8_7.pt'))
torch.save(weights_8[8], os.path.join(weights_save_path, dataset_name+'_vgg16_w8_8.pt'))
torch.save(weights_8[10], os.path.join(weights_save_path, dataset_name+'_vgg16_w8_10.pt'))
torch.save(weights_8[12], os.path.join(weights_save_path, dataset_name+'_vgg16_w8_12.pt'))

print('+++++++++++++++++++++++ Model 9 +++++++++++++++++++++++++')
t0 = time.time()

model = mm.MyCNN(N_CLASSES).to(DEVICE)
model = model.float()
model.add(mm.MyLayer('conv', [3, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [64, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [64, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [128, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [128, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [256, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [256, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [256, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('flat', 0, 0, 0))
model.add(mm.MyLayer('fc', [512 * 4 * 4, N_CLASSES], False, activations=torch.sigmoid))
model.complete_net(train_loader)
wl_0 = torch.zeros(N_CLASSES, 512 * 4 * 4).float().to(DEVICE)
model.set_weights_index(wl_0, -1)
model_name = '_9'
print([x.name for x in model.layers])
model.set_weights_index(weights_8[0], 0)
model.set_weights_index(weights_8[1], 1)
model.set_weights_index(weights_8[3], 3)
model.set_weights_index(weights_8[4], 4)
model.set_weights_index(weights_8[6], 6)
model.set_weights_index(weights_8[7], 7)
model.set_weights_index(weights_8[8], 8)
model.set_weights_index(weights_8[10], 10)

print('************** pre train phase ****************')
pre_train = FPL(model, train_loader, val_loader, epochs=2, loop=1, gain=-1, mix_data=False,
                model_name=model_name, path=model_save_path)
pre_train.inverse_layerwise_training(no_layers=1)
print('************** fine-tuning phase ****************')
fine_tuning = FPL(model, train_loader, val_loader, epochs=no_epochs, gain=1e-3,
                  model_name=model_name, path=model_save_path)
fine_tuning.inc_train_2_layer(pool_layer=False, true_for=5)
print('time: ', time.time() - t0)
acc_lst, loss_lst = model.evaluate_both(train_loader, val_loader)
print('accuracy: ', acc_lst)
print('loss: ', loss_lst)

weights_9 = model.get_weights()
torch.save(weights_9[0], os.path.join(weights_save_path, dataset_name+'_vgg16_w9_0.pt'))
torch.save(weights_9[1], os.path.join(weights_save_path, dataset_name+'_vgg16_w9_1.pt'))
torch.save(weights_9[3], os.path.join(weights_save_path, dataset_name+'_vgg16_w9_3.pt'))
torch.save(weights_9[4], os.path.join(weights_save_path, dataset_name+'_vgg16_w9_4.pt'))
torch.save(weights_9[6], os.path.join(weights_save_path, dataset_name+'_vgg16_w9_6.pt'))
torch.save(weights_9[7], os.path.join(weights_save_path, dataset_name+'_vgg16_w9_7.pt'))
torch.save(weights_9[8], os.path.join(weights_save_path, dataset_name+'_vgg16_w9_8.pt'))
torch.save(weights_9[10], os.path.join(weights_save_path, dataset_name+'_vgg16_w9_10.pt'))
torch.save(weights_9[11], os.path.join(weights_save_path, dataset_name+'_vgg16_w9_11.pt'))
torch.save(weights_9[13], os.path.join(weights_save_path, dataset_name+'_vgg16_w9_13.pt'))

print('+++++++++++++++++++++++ Model 10 +++++++++++++++++++++++++')
t0 = time.time()

model = mm.MyCNN(N_CLASSES).to(DEVICE)
model = model.float()
model.add(mm.MyLayer('conv', [3, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [64, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [64, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [128, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [128, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [256, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [256, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [256, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('flat', 0, 0, 0))
model.add(mm.MyLayer('fc', [512 * 2 * 2, N_CLASSES], False, activations=torch.sigmoid))
model.complete_net(train_loader)
wl_0 = torch.zeros(N_CLASSES, 512 * 2 * 2).float().to(DEVICE)
model.set_weights_index(wl_0, -1)
model_name = '_10'
print([x.name for x in model.layers])
model.set_weights_index(weights_9[0], 0)
model.set_weights_index(weights_9[1], 1)
model.set_weights_index(weights_9[3], 3)
model.set_weights_index(weights_9[4], 4)
model.set_weights_index(weights_9[6], 6)
model.set_weights_index(weights_9[7], 7)
model.set_weights_index(weights_9[8], 8)
model.set_weights_index(weights_9[10], 10)
model.set_weights_index(weights_9[11], 11)

print('************** pre train phase ****************')
pre_train = FPL(model, train_loader, val_loader, epochs=2, loop=1, gain=-1, mix_data=False,
                model_name=model_name, path=model_save_path)
pre_train.inverse_layerwise_training(no_layers=1)
print('************** fine-tuning phase ****************')
fine_tuning = FPL(model, train_loader, val_loader, epochs=no_epochs, gain=1e-3,
                  model_name=model_name, path=model_save_path)
fine_tuning.inc_train_2_layer(true_for=5)
print('time: ', time.time() - t0)
acc_lst, loss_lst = model.evaluate_both(train_loader, val_loader)
print('accuracy: ', acc_lst)
print('loss: ', loss_lst)

weights_10 = model.get_weights()
torch.save(weights_10[0], os.path.join(weights_save_path, dataset_name+'_vgg16_w10_0.pt'))
torch.save(weights_10[1], os.path.join(weights_save_path, dataset_name+'_vgg16_w10_1.pt'))
torch.save(weights_10[3], os.path.join(weights_save_path, dataset_name+'_vgg16_w10_3.pt'))
torch.save(weights_10[4], os.path.join(weights_save_path, dataset_name+'_vgg16_w10_4.pt'))
torch.save(weights_10[6], os.path.join(weights_save_path, dataset_name+'_vgg16_w10_6.pt'))
torch.save(weights_10[7], os.path.join(weights_save_path, dataset_name+'_vgg16_w10_7.pt'))
torch.save(weights_10[8], os.path.join(weights_save_path, dataset_name+'_vgg16_w10_8.pt'))
torch.save(weights_10[10], os.path.join(weights_save_path, dataset_name+'_vgg16_w10_10.pt'))
torch.save(weights_10[11], os.path.join(weights_save_path, dataset_name+'_vgg16_w10_11.pt'))
torch.save(weights_10[12], os.path.join(weights_save_path, dataset_name+'_vgg16_w10_12.pt'))
torch.save(weights_10[15], os.path.join(weights_save_path, dataset_name+'_vgg16_w10_15.pt'))

print('+++++++++++++++++++++++ Model 11 +++++++++++++++++++++++++')
t0 = time.time()

model = mm.MyCNN(N_CLASSES).to(DEVICE)
model = model.float()
model.add(mm.MyLayer('conv', [3, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [64, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [64, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [128, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [128, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [256, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [256, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [256, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('flat', 0, 0, 0))
model.add(mm.MyLayer('fc', [512 * 2 * 2, N_CLASSES], False, activations=torch.sigmoid))
model.complete_net(train_loader)
wl_0 = torch.zeros(N_CLASSES, 512 * 2 * 2).float().to(DEVICE)
model.set_weights_index(wl_0, -1)
model_name = '_11'
print([x.name for x in model.layers])
model.set_weights_index(weights_10[0], 0)
model.set_weights_index(weights_10[1], 1)
model.set_weights_index(weights_10[3], 3)
model.set_weights_index(weights_10[4], 4)
model.set_weights_index(weights_10[6], 6)
model.set_weights_index(weights_10[7], 7)
model.set_weights_index(weights_10[8], 8)
model.set_weights_index(weights_10[10], 10)
model.set_weights_index(weights_10[11], 11)
model.set_weights_index(weights_10[12], 12)

print('************** pre train phase ****************')
pre_train = FPL(model, train_loader, val_loader, epochs=2, loop=1, gain=-1, mix_data=False,
                model_name=model_name, path=model_save_path)
pre_train.inverse_layerwise_training(no_layers=1)
print('************** fine-tuning phase ****************')
fine_tuning = FPL(model, train_loader, val_loader, epochs=no_epochs, gain=1e-3,
                  model_name=model_name, path=model_save_path)
fine_tuning.inc_train_2_layer(pool_layer=False, true_for=5)
print('time: ', time.time() - t0)
acc_lst, loss_lst = model.evaluate_both(train_loader, val_loader)
print('accuracy: ', acc_lst)
print('loss: ', loss_lst)

weights_11 = model.get_weights()
torch.save(weights_11[0], os.path.join(weights_save_path, dataset_name+'_vgg16_w11_0.pt'))
torch.save(weights_11[1], os.path.join(weights_save_path, dataset_name+'_vgg16_w11_1.pt'))
torch.save(weights_11[3], os.path.join(weights_save_path, dataset_name+'_vgg16_w11_3.pt'))
torch.save(weights_11[4], os.path.join(weights_save_path, dataset_name+'_vgg16_w11_4.pt'))
torch.save(weights_11[6], os.path.join(weights_save_path, dataset_name+'_vgg16_w11_6.pt'))
torch.save(weights_11[7], os.path.join(weights_save_path, dataset_name+'_vgg16_w11_7.pt'))
torch.save(weights_11[8], os.path.join(weights_save_path, dataset_name+'_vgg16_w11_8.pt'))
torch.save(weights_11[10], os.path.join(weights_save_path, dataset_name+'_vgg16_w11_10.pt'))
torch.save(weights_11[11], os.path.join(weights_save_path, dataset_name+'_vgg16_w11_11.pt'))
torch.save(weights_11[12], os.path.join(weights_save_path, dataset_name+'_vgg16_w11_12.pt'))
torch.save(weights_11[14], os.path.join(weights_save_path, dataset_name+'_vgg16_w11_14.pt'))
torch.save(weights_11[16], os.path.join(weights_save_path, dataset_name+'_vgg16_w11_16.pt'))

print('+++++++++++++++++++++++ Model 12 +++++++++++++++++++++++++')
t0 = time.time()

model = mm.MyCNN(N_CLASSES).to(DEVICE)
model = model.float()
model.add(mm.MyLayer('conv', [3, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [64, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [64, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [128, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [128, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [256, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [256, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [256, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('flat', 0, 0, 0))
model.add(mm.MyLayer('fc', [512 * 2 * 2, N_CLASSES], False, activations=torch.sigmoid))
model.complete_net(train_loader)
wl_0 = torch.zeros(N_CLASSES, 512 * 2 * 2).float().to(DEVICE)
model.set_weights_index(wl_0, -1)
model_name = '_12'
print([x.name for x in model.layers])
model.set_weights_index(weights_11[0], 0)
model.set_weights_index(weights_11[1], 1)
model.set_weights_index(weights_11[3], 3)
model.set_weights_index(weights_11[4], 4)
model.set_weights_index(weights_11[6], 6)
model.set_weights_index(weights_11[7], 7)
model.set_weights_index(weights_11[8], 8)
model.set_weights_index(weights_11[10], 10)
model.set_weights_index(weights_11[11], 11)
model.set_weights_index(weights_11[12], 12)
model.set_weights_index(weights_11[14], 14)

print('************** pre train phase ****************')
pre_train = FPL(model, train_loader, val_loader, epochs=2, loop=1, gain=-1, mix_data=False,
                model_name=model_name, path=model_save_path)
pre_train.inverse_layerwise_training(no_layers=1)
print('************** fine-tuning phase ****************')
fine_tuning = FPL(model, train_loader, val_loader, epochs=no_epochs, gain=1e-3,
                  model_name=model_name, path=model_save_path)
fine_tuning.inc_train_2_layer(pool_layer=False, true_for=5)
print('time: ', time.time() - t0)
acc_lst, loss_lst = model.evaluate_both(train_loader, val_loader)
print('accuracy: ', acc_lst)
print('loss: ', loss_lst)

weights_12 = model.get_weights()
torch.save(weights_12[0], os.path.join(weights_save_path, dataset_name+'_vgg16_w12_0.pt'))
torch.save(weights_12[1], os.path.join(weights_save_path, dataset_name+'_vgg16_w12_1.pt'))
torch.save(weights_12[3], os.path.join(weights_save_path, dataset_name+'_vgg16_w12_3.pt'))
torch.save(weights_12[4], os.path.join(weights_save_path, dataset_name+'_vgg16_w12_4.pt'))
torch.save(weights_12[6], os.path.join(weights_save_path, dataset_name+'_vgg16_w12_6.pt'))
torch.save(weights_12[7], os.path.join(weights_save_path, dataset_name+'_vgg16_w12_7.pt'))
torch.save(weights_12[8], os.path.join(weights_save_path, dataset_name+'_vgg16_w12_8.pt'))
torch.save(weights_12[10], os.path.join(weights_save_path, dataset_name+'_vgg16_w12_10.pt'))
torch.save(weights_12[11], os.path.join(weights_save_path, dataset_name+'_vgg16_w12_11.pt'))
torch.save(weights_12[12], os.path.join(weights_save_path, dataset_name+'_vgg16_w12_12.pt'))
torch.save(weights_12[14], os.path.join(weights_save_path, dataset_name+'_vgg16_w12_14.pt'))
torch.save(weights_12[15], os.path.join(weights_save_path, dataset_name+'_vgg16_w12_15.pt'))
torch.save(weights_12[17], os.path.join(weights_save_path, dataset_name+'_vgg16_w12_17.pt'))

print('+++++++++++++++++++++++ Model 13 +++++++++++++++++++++++++')
t0 = time.time()

model = mm.MyCNN(N_CLASSES).to(DEVICE)
model = model.float()
model.add(mm.MyLayer('conv', [3, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [64, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [64, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [128, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [128, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [256, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [256, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [256, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('flat', 0, 0, 0))
model.add(mm.MyLayer('fc', [512 * 1 * 1, N_CLASSES], False, activations=torch.sigmoid))
model.complete_net(train_loader)
wl_0 = torch.zeros(N_CLASSES, 512 * 1 * 1).float().to(DEVICE)
model.set_weights_index(wl_0, -1)
model_name = '_13'
print([x.name for x in model.layers])
model.set_weights_index(weights_12[0], 0)
model.set_weights_index(weights_12[1], 1)
model.set_weights_index(weights_12[3], 3)
model.set_weights_index(weights_12[4], 4)
model.set_weights_index(weights_12[6], 6)
model.set_weights_index(weights_12[7], 7)
model.set_weights_index(weights_12[8], 8)
model.set_weights_index(weights_12[10], 10)
model.set_weights_index(weights_12[11], 11)
model.set_weights_index(weights_12[12], 12)
model.set_weights_index(weights_12[14], 14)
model.set_weights_index(weights_12[15], 15)

print('************** pre train phase ****************')
pre_train = FPL(model, train_loader, val_loader, epochs=2, loop=1, gain=-1, mix_data=False,
                model_name=model_name, path=model_save_path)
pre_train.inverse_layerwise_training(no_layers=1)
print('************** fine-tuning phase ****************')
fine_tuning = FPL(model, train_loader, val_loader, epochs=no_epochs, gain=1e-3,
                  model_name=model_name, path=model_save_path)
fine_tuning.inc_train_2_layer(true_for=5)
print('time: ', time.time() - t0)
acc_lst, loss_lst = model.evaluate_both(train_loader, val_loader)
print('accuracy: ', acc_lst)
print('loss: ', loss_lst)

weights_13 = model.get_weights()
torch.save(weights_13[0], os.path.join(weights_save_path, dataset_name+'_vgg16_w13_0.pt'))
torch.save(weights_13[1], os.path.join(weights_save_path, dataset_name+'_vgg16_w13_1.pt'))
torch.save(weights_13[3], os.path.join(weights_save_path, dataset_name+'_vgg16_w13_3.pt'))
torch.save(weights_13[4], os.path.join(weights_save_path, dataset_name+'_vgg16_w13_4.pt'))
torch.save(weights_13[6], os.path.join(weights_save_path, dataset_name+'_vgg16_w13_6.pt'))
torch.save(weights_13[7], os.path.join(weights_save_path, dataset_name+'_vgg16_w13_7.pt'))
torch.save(weights_13[8], os.path.join(weights_save_path, dataset_name+'_vgg16_w13_8.pt'))
torch.save(weights_13[10], os.path.join(weights_save_path, dataset_name+'_vgg16_w13_10.pt'))
torch.save(weights_13[11], os.path.join(weights_save_path, dataset_name+'_vgg16_w13_11.pt'))
torch.save(weights_13[12], os.path.join(weights_save_path, dataset_name+'_vgg16_w13_12.pt'))
torch.save(weights_13[14], os.path.join(weights_save_path, dataset_name+'_vgg16_w13_14.pt'))
torch.save(weights_13[15], os.path.join(weights_save_path, dataset_name+'_vgg16_w13_15.pt'))
torch.save(weights_13[16], os.path.join(weights_save_path, dataset_name+'_vgg16_w13_16.pt'))
torch.save(weights_13[19], os.path.join(weights_save_path, dataset_name+'_vgg16_w13_19.pt'))

# add fc layers
print('+++++++++++++++++++++++ Model 14 +++++++++++++++++++++++++')
t0 = time.time()

model = mm.MyCNN(N_CLASSES).to(DEVICE)
model = model.float()
model.add(mm.MyLayer('conv', [3, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [64, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [64, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [128, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [128, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [256, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [256, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [256, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('flat', 0, 0, 0))
model.add(mm.MyLayer('fc', [512 * 1 * 1, 512], False, activations=f.relu))
model.add(mm.MyLayer('fc', [512, N_CLASSES], False, activations=torch.sigmoid))
model.complete_net(train_loader)
wl_0 = torch.zeros(N_CLASSES, 512).float().to(DEVICE)
model.set_weights_index(wl_0, -1)
model_name = '_14'
print([x.name for x in model.layers])
model.set_weights_index(weights_13[0], 0)
model.set_weights_index(weights_13[1], 1)
model.set_weights_index(weights_13[3], 3)
model.set_weights_index(weights_13[4], 4)
model.set_weights_index(weights_13[6], 6)
model.set_weights_index(weights_13[7], 7)
model.set_weights_index(weights_13[8], 8)
model.set_weights_index(weights_13[10], 10)
model.set_weights_index(weights_13[11], 11)
model.set_weights_index(weights_13[12], 12)
model.set_weights_index(weights_13[14], 14)
model.set_weights_index(weights_13[15], 15)
model.set_weights_index(weights_13[16], 16)

print('************** pre train phase ****************')
pre_train = FPL(model, train_loader, val_loader, epochs=2, loop=1, gain=-1, mix_data=False,
                model_name=model_name, path=model_save_path)
pre_train.inverse_layerwise_training(no_layers=1)
print('************** fine-tuning phase ****************')
fine_tuning = FPL(model, train_loader, val_loader, epochs=100, loop=1, gain=1e-3,
                  model_name=model_name, path=model_save_path)
fine_tuning.conv_train_2_fc_layer_last(auto=True)
print('time: ', time.time() - t0)
acc_lst, loss_lst = model.evaluate_both(train_loader, val_loader)
print('accuracy: ', acc_lst)
print('loss: ', loss_lst)

weights_14 = model.get_weights()
torch.save(weights_14[0], os.path.join(weights_save_path, dataset_name+'_vgg16_w14_0.pt'))
torch.save(weights_14[1], os.path.join(weights_save_path, dataset_name+'_vgg16_w14_1.pt'))
torch.save(weights_14[3], os.path.join(weights_save_path, dataset_name+'_vgg16_w14_3.pt'))
torch.save(weights_14[4], os.path.join(weights_save_path, dataset_name+'_vgg16_w14_4.pt'))
torch.save(weights_14[6], os.path.join(weights_save_path, dataset_name+'_vgg16_w14_6.pt'))
torch.save(weights_14[7], os.path.join(weights_save_path, dataset_name+'_vgg16_w14_7.pt'))
torch.save(weights_14[8], os.path.join(weights_save_path, dataset_name+'_vgg16_w14_8.pt'))
torch.save(weights_14[10], os.path.join(weights_save_path, dataset_name+'_vgg16_w14_10.pt'))
torch.save(weights_14[11], os.path.join(weights_save_path, dataset_name+'_vgg16_w14_11.pt'))
torch.save(weights_14[12], os.path.join(weights_save_path, dataset_name+'_vgg16_w14_12.pt'))
torch.save(weights_14[14], os.path.join(weights_save_path, dataset_name+'_vgg16_w14_14.pt'))
torch.save(weights_14[15], os.path.join(weights_save_path, dataset_name+'_vgg16_w14_15.pt'))
torch.save(weights_14[16], os.path.join(weights_save_path, dataset_name+'_vgg16_w14_16.pt'))
torch.save(weights_14[19], os.path.join(weights_save_path, dataset_name+'_vgg16_w14_19.pt'))
torch.save(weights_14[20], os.path.join(weights_save_path, dataset_name+'_vgg16_w14_20.pt'))

print('+++++++++++++++++++++++ Model 15 +++++++++++++++++++++++++')
t0 = time.time()

model = mm.MyCNN(N_CLASSES).to(DEVICE)
model = model.float()
model.add(mm.MyLayer('conv', [3, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [64, 64, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [64, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [128, 128, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [128, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [256, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [256, 256, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [256, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('conv', [512, 512, 3], padding=1, bias=False, activations=f.relu))
model.add(mm.MyLayer('pool', [2], 0, 0))
model.add(mm.MyLayer('flat', 0, 0, 0))
model.add(mm.MyLayer('fc', [512 * 1 * 1, 512], False, activations=f.relu))
model.add(mm.MyLayer('fc', [512, 512], False, activations=f.relu))
model.add(mm.MyLayer('fc', [512, N_CLASSES], False, activations=torch.sigmoid))
model.complete_net(train_loader)
wl_0 = torch.zeros(N_CLASSES, 512).float().to(DEVICE)
model.set_weights_index(wl_0, -1)
model_name = '_15'
print([x.name for x in model.layers])
model.set_weights_index(weights_14[0], 0)
model.set_weights_index(weights_14[1], 1)
model.set_weights_index(weights_14[3], 3)
model.set_weights_index(weights_14[4], 4)
model.set_weights_index(weights_14[6], 6)
model.set_weights_index(weights_14[7], 7)
model.set_weights_index(weights_14[8], 8)
model.set_weights_index(weights_14[10], 10)
model.set_weights_index(weights_14[11], 11)
model.set_weights_index(weights_14[12], 12)
model.set_weights_index(weights_14[14], 14)
model.set_weights_index(weights_14[15], 15)
model.set_weights_index(weights_14[16], 16)
model.set_weights_index(weights_14[19], 19)

print('************** pre train phase ****************')
pre_train = FPL(model, train_loader, val_loader, epochs=2, loop=1, gain=-1, mix_data=False,
                model_name=model_name, path=model_save_path)
pre_train.inverse_layerwise_training(no_layers=1)
print('************** fine-tuning phase ****************')
fine_tuning = FPL(model, train_loader, val_loader, epochs=100, loop=1, gain=1e-3,
                  model_name=model_name, path=model_save_path)
fine_tuning.conv_train_2_fc_layer_last(auto=True)
print('time: ', time.time() - t0)
acc_lst, loss_lst = model.evaluate_both(train_loader, val_loader)
print('accuracy: ', acc_lst)
print('loss: ', loss_lst)

weights_15 = model.get_weights()
torch.save(weights_15[0], os.path.join(weights_save_path, dataset_name+'_vgg16_w15_0.pt'))
torch.save(weights_15[1], os.path.join(weights_save_path, dataset_name+'_vgg16_w15_1.pt'))
torch.save(weights_15[3], os.path.join(weights_save_path, dataset_name+'_vgg16_w15_3.pt'))
torch.save(weights_15[4], os.path.join(weights_save_path, dataset_name+'_vgg16_w15_4.pt'))
torch.save(weights_15[6], os.path.join(weights_save_path, dataset_name+'_vgg16_w15_6.pt'))
torch.save(weights_15[7], os.path.join(weights_save_path, dataset_name+'_vgg16_w15_7.pt'))
torch.save(weights_15[8], os.path.join(weights_save_path, dataset_name+'_vgg16_w15_8.pt'))
torch.save(weights_15[10], os.path.join(weights_save_path, dataset_name+'_vgg16_w15_10.pt'))
torch.save(weights_15[11], os.path.join(weights_save_path, dataset_name+'_vgg16_w15_11.pt'))
torch.save(weights_15[12], os.path.join(weights_save_path, dataset_name+'_vgg16_w15_12.pt'))
torch.save(weights_15[14], os.path.join(weights_save_path, dataset_name+'_vgg16_w15_14.pt'))
torch.save(weights_15[15], os.path.join(weights_save_path, dataset_name+'_vgg16_w15_15.pt'))
torch.save(weights_15[16], os.path.join(weights_save_path, dataset_name+'_vgg16_w15_16.pt'))
torch.save(weights_15[19], os.path.join(weights_save_path, dataset_name+'_vgg16_w15_19.pt'))
torch.save(weights_15[20], os.path.join(weights_save_path, dataset_name+'_vgg16_w15_20.pt'))
torch.save(weights_15[21], os.path.join(weights_save_path, dataset_name+'_vgg16_w15_21.pt'))